<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulated Payment - Hackathon Model</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }
        .container {
            max-width: 450px;
            width: 100%;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        .header {
            background-color: #4CAF50; /* Green */
            color: white;
            padding: 20px 24px;
            text-align: center;
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
        }
        .payment-options {
            padding: 24px;
        }
        .option-card {
            display: flex;
            align-items: center;
            padding: 16px;
            margin-bottom: 12px;
            background-color: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }
        .option-card:hover {
            border-color: #4CAF50; /* Green */
            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.1); /* Green shadow */
            transform: translateY(-2px);
        }
        .option-card.selected {
            border-color: #4CAF50; /* Green */
            background-color: #e8f5e9; /* Lighter green */
        }
        .option-icon {
            font-size: 28px;
            margin-right: 16px;
            color: #4CAF50; /* Green */
        }
        .option-text {
            flex-grow: 1;
        }
        .option-text h3 {
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
        }
        .option-text p {
            font-size: 0.85rem;
            color: #666;
        }
        .card-details-section {
            margin-top: 20px;
            padding: 15px;
            background-color: #f0f2f5;
            border-radius: 8px;
            display: none; /* Hidden by default */
        }
        .card-details-section.show {
            display: block;
        }
        .card-details-section label {
            display: block;
            font-size: 0.9rem;
            color: #333;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .card-details-section input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            font-size: 1rem;
        }
        .card-details-section .input-group {
            display: flex;
            gap: 10px;
        }
        .card-details-section .input-group > div {
            flex: 1;
        }
        .pay-button {
            width: 100%;
            padding: 14px;
            background-color: #4CAF50; /* Green */
            color: white;
            font-weight: 600;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
            margin-top: 20px;
        }
        .pay-button:hover {
            background-color: #45a049; /* Darker green */
        }
        .pay-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #ffffff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            text-align: center;
            z-index: 1000;
            max-width: 350px;
            width: 90%;
            display: none; /* Hidden by default */
        }
        .message-box.show {
            display: block;
        }
        .message-box h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        .message-box p {
            color: #666;
            margin-bottom: 25px;
        }
        .message-box button {
            background-color: #4CAF50; /* Green */
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }
        .message-box button:hover {
            background-color: #45a049; /* Darker green */
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none; /* Hidden by default */
        }
        .overlay.show {
            display: block;
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #4CAF50; /* Green */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: inline-block;
            vertical-align: middle;
            margin-left: 10px;
            display: none; /* Hidden by default */
        }
        .pay-button.loading .loading-spinner {
            display: inline-block;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2 class="text-2xl font-bold">Choose Payment Method</h2>
        </div>
        <div class="payment-options">
            <!-- GPay Option -->
            <div id="gpay-card" class="option-card" data-method="gpay">
                <span class="option-icon">ðŸ’³</span> <!-- Using a card emoji for GPay for simplicity -->
                <div class="option-text">
                    <h3>Google Pay (Simulated)</h3>
                    <p>Simulated payment for demonstration.</p>
                </div>
            </div>

            <!-- Card Option -->
            <div id="card-card" class="option-card" data-method="card">
                <span class="option-icon">ðŸ’³</span>
                <div class="option-text">
                    <h3>Credit/Debit Card (Simulated)</h3>
                    <p>Simulated payment for demonstration.</p>
                </div>
            </div>

            <!-- Cash Option -->
            <div id="cash-card" class="option-card" data-method="cash">
                <span class="option-icon">ðŸ’µ</span>
                <div class="option-text">
                    <h3>Cash on Delivery</h3>
                    <p>Pay with cash when your order arrives.</p>
                </div>
            </div>

            <!-- Card Details Input Section (Initially Hidden) -->
            <div id="card-details-section" class="card-details-section">
                <h4 class="text-lg font-semibold text-gray-700 mb-4">Enter Card Details</h4>
                <div>
                    <label for="card-number">Card Number</label>
                    <input type="text" id="card-number" placeholder="XXXX XXXX XXXX XXXX" maxlength="19" pattern="[0-9]{4}[0-9]{4}[0-9]{4}[0-9]{4}" title="Enter a 16-digit card number" required>
                </div>
                <div class="input-group">
                    <div>
                        <label for="expiry-date">Expiry Date</label>
                        <input type="text" id="expiry-date" placeholder="MM/YY" maxlength="5" pattern="(0[1-9]|1[0-2])\/([0-9]{2})" title="Enter expiry date in MM/YY format" required>
                    </div>
                    <div>
                        <label for="cvv">CVV</label>
                        <input type="text" id="cvv" placeholder="XXX" maxlength="4" pattern="[0-9]{3,4}" title="Enter 3 or 4 digit CVV" required>
                    </div>
                </div>
            </div>

            <button id="pay-button" class="pay-button" disabled>
                Pay Now
                <span id="loading-spinner" class="loading-spinner"></span>
            </button>
        </div>
    </div>

    <!-- Message Box for alerts -->
    <div id="message-overlay" class="overlay"></div>
    <div id="message-box" class="message-box">
        <h3 id="message-title"></h3>
        <p id="message-content"></p>
        <button id="message-ok-button">OK</button>
    </div>

    <script>
        // Function to show custom message box
        function showMessageBox(title, content) {
            document.getElementById('message-title').textContent = title;
            document.getElementById('message-content').textContent = content;
            document.getElementById('message-box').classList.add('show');
            document.getElementById('message-overlay').classList.add('show');
        }

        // Function to hide custom message box
        function hideMessageBox() {
            document.getElementById('message-box').classList.remove('show');
            document.getElementById('message-overlay').classList.remove('show');
        }

        document.getElementById('message-ok-button').addEventListener('click', hideMessageBox);

        const paymentCards = document.querySelectorAll('.option-card');
        const payButton = document.getElementById('pay-button');
        const loadingSpinner = document.getElementById('loading-spinner');
        const cardDetailsSection = document.getElementById('card-details-section');
        const cardNumberInput = document.getElementById('card-number');
        const expiryDateInput = document.getElementById('expiry-date');
        const cvvInput = document.getElementById('cvv');
        let selectedMethod = null;

        // Add click listeners to payment option cards
        paymentCards.forEach(card => {
            card.addEventListener('click', () => {
                // Remove 'selected' class from all cards
                paymentCards.forEach(c => c.classList.remove('selected'));
                // Add 'selected' class to the clicked card
                card.classList.add('selected');
                selectedMethod = card.dataset.method;
                payButton.disabled = false; // Enable pay button

                // Show/hide card details section based on selected method
                if (selectedMethod === 'card') {
                    cardDetailsSection.classList.add('show');
                } else {
                    cardDetailsSection.classList.remove('show');
                    // Clear card input fields when hidden
                    cardNumberInput.value = '';
                    expiryDateInput.value = '';
                    cvvInput.value = '';
                }
            });
        });

        // Add input formatting for card number (add spaces)
        cardNumberInput.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, ''); // Remove non-digits
            value = value.replace(/(\d{4})(?=\d)/g, '$1 '); // Add space after every 4 digits
            e.target.value = value.trim();
        });

        // Add input formatting for expiry date (add slash)
        expiryDateInput.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, ''); // Remove non-digits
            if (value.length > 2) {
                value = value.substring(0, 2) + '/' + value.substring(2, 4);
            }
            e.target.value = value;
        });


        // Handle pay button click
        payButton.addEventListener('click', () => {
            if (!selectedMethod) {
                showMessageBox('Error', 'Please select a payment method.');
                return;
            }

            // For card payments, perform basic validation
            if (selectedMethod === 'card') {
                if (!cardNumberInput.value || cardNumberInput.value.replace(/\s/g, '').length !== 16) {
                    showMessageBox('Error', 'Please enter a valid 16-digit card number.');
                    return;
                }
                if (!expiryDateInput.value || !/^(0[1-9]|1[0-2])\/([0-9]{2})$/.test(expiryDateInput.value)) {
                    showMessageBox('Error', 'Please enter a valid expiry date (MM/YY).');
                    return;
                }
                if (!cvvInput.value || !/^[0-9]{3,4}$/.test(cvvInput.value)) {
                    showMessageBox('Error', 'Please enter a valid 3 or 4 digit CVV.');
                    return;
                }
            }

            payButton.disabled = true;
            payButton.classList.add('loading'); // Show loading spinner

            if (selectedMethod === 'cash') {
                // Simulate Cash on Delivery success
                setTimeout(() => {
                    showMessageBox('Order Placed!', 'Your order has been placed successfully. Pay with cash on delivery.');
                    payButton.disabled = false;
                    payButton.classList.remove('loading'); // Hide loading spinner
                }, 1500);
            } else {
                // Simulate Razorpay payment success/failure for 'gpay' or 'card'
                simulateRazorpayPayment();
            }
        });

        function simulateRazorpayPayment() {
            // Simulate a delay for the "payment processing"
            setTimeout(() => {
                const isSuccess = Math.random() > 0.1; // 90% chance of success, 10% chance of failure for demo
                if (isSuccess) {
                    const simulatedPaymentId = 'pay_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
                    showMessageBox('Payment Successful!', `Simulated Payment ID: ${simulatedPaymentId}`);
                } else {
                    showMessageBox('Payment Failed', 'Simulated payment failed. Please try again.');
                }
                payButton.disabled = false;
                payButton.classList.remove('loading'); // Hide loading spinner
            }, 2000); // Simulate a 2-second loading time
        }
    </script>
</body>
</html>
